#!/usr/bin/env python
import random
import math

class kursawe:
    def __init__(self):
        self.l = [random.uniform(-5,5) for x in range(8)]
        self.l+=[0,0]

    def calc():
        for i in range (0, 7):
            self.l[8]+=(-10*(math.e)**((-0.2)*math.sqrt((l[i])**2+(l[i+1])**2)))
            self.l[9]+=abs(l[i])**0.8+5*(math.sin(l[i])**3)

def getMean(meanRuns=25): ## this needs to be re written once I figure out all of the other things to rewrite
    mean = 0
    x = [0,0,0,0]
    for i in range(meanRuns):
        k = score(kursawe())
        if x[0] < k[8]:
            x[0]=k[8]
        if x[0] > k[8]:
            x[1]=k[8] 
        if x[0] < k[9]: ##Technically this is not needed nor any other k[9]
            x[2]=k[9] 
        if x[0] > k[9]: ##Technically we don't need this
            x[3]=k[9]
        mean += k[8]
        print "Run " +`i` +": " + `k[8]` +", " + `k[9]`
    print "Max1: " + `x[0]`
    print "Min1: " + `x[1]`
    print "Max2: " + `x[2]`
    print "Min2: " + `x[3]`
    mean /=meanRuns
    print "Mean: " + `mean`
    return mean



def mutate(mutateSol, rate, dC):
    imax=len(mutateSol)
    imax -= dC ## dC is dont counts thus the number of answers in kursawe
    for i in range(imax):
        if random.random() <= rate:
            mutateSol[i] = random.uniform(-5,5)
    return score(mutateSol)


def p(old,new,t):
    return math.e**((old-new)/t) ## according to menzies this is math.e, so its back to that, I need to normalize my scores now

def sa(kmax=1000, rate=0.33):
    curSol= kursawe()
    bestSol = curSol
    initE = getMean()
    bestE = initE
    k = 1.0
    while k < kmax:
        if k%50 == 0:
            print ''
        neighborSol = mutate(curSol, rate, 2)
        if neighborSol[8] > bestE:
            bestE = neighborSol[8]
            bestSol = neighborSol
            print `round(bestE, 2)`,
        elif p(bestE, neighborSol[8], k/kmax) > random.random(): ##this never jumps?!?! or jumps way too much (may have fixed it with the new score fxn
            curSol = neighborSol
            print '?',
        print '.',
        k +=1
    return bestSol


print 'Best Solution \n'
print sa()
