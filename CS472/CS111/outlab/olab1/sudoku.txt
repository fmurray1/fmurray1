--- Begin sudoku.java ---
1:	/* Francis Murray CS111 Out of Lab Project 1 */
2:	
3:	import java.util.*;
4:	import java.io.*;
5:	
6:	
7:	public class sudoku
8:	{
9:	    
10:	    public static int puzzle [][] = new int [6][6];
11:	    
12:	    
13:	    
14:	    public static void main(String [] args) throws Exception
15:	    {
16:		
17:		FileReader infile = new FileReader("puzzle.txt");
18:		Scanner sc = new Scanner(infile);
19:		
20:		
21:		for(int i=0; i<6; i++)  
22:		    {
23:			for(int j=0; j<6; j++)
24:			    {
25:				puzzle[i][j] = sc.nextInt();
26:			    }
27:		    }
28:	
29:		sc.close();
30:		
31:		
32:		System.out.println("The Original Puzzle was:");
33:		print(puzzle);
34:		
35:		if(solve(0,0))
36:		    {
37:			System.out.println("");
38:			System.out.println("");
39:			System.out.println("The Solved Puzzle is:");
40:			print(puzzle);
41:		    }
42:	    }
43:	    
44:	    
45:	    public static void print(int a [][])
46:	    {
47:		for(int b=0; b<6; b++)
48:		    {
49:			for(int c=0; c<6; c++)
50:			    {
51:				if(c==5)
52:				    {
53:					System.out.println(a[b][c]);
54:				    }
55:				else
56:				    {
57:					System.out.print(a[b][c]+" ");
58:				    }
59:			    }
60:		    }
61:	    }
62:	    
63:	    
64:	    
65:	    public static boolean solve(int row, int col)
66:	    {
67:		//System.out.println("Entering");
68:		
69:		if(row==6)
70:		    {
71:			row =0;
72:			col++;
73:			if(col==6)
74:			    {
75:				return true;
76:			    }
77:		    }
78:		if(puzzle[row][col]!=0)
79:		    {
80:			//System.out.println("Moving over a row");
81:			return solve(row+1,col);
82:		    }
83:		
84:		for(int trying =1; trying <7; trying++)
85:		    {
86:			//System.out.println("Entering " +row +"," +col);
87:			if(row(row,trying) && column(col,trying) && box(row,col,trying))
88:			    {
89:				//System.out.println("Trying" +trying);
90:				
91:				puzzle[row][col]=trying;
92:				
93:				if(solve(row+1, col))
94:				    {
95:					return true;
96:				    }
97:				
98:			    }
99:		    }
100:		puzzle[row][col]=0;
101:		return false;  	
102:	    }
103:	    
104:	    
105:	    
106:	    public static boolean row(int d, int num)
107:	    {
108:		for(int a=0; a<6; a++)
109:		    {
110:			if(puzzle[d][a]==num)
111:			    {
112:				return false;
113:			    }
114:	     	    }
115:		return true;
116:	    }
117:	    
118:	    public static boolean column(int d, int num)
119:	    {
120:		for(int a = 0; a<6; a++)
121:		    {
122:			if(puzzle[a][d]==num)
123:			    {
124:				return false;
125:			    }
126:			
127:		    }
128:		return true;
129:		
130:	    }
131:	    
132:	    public static boolean box(int d, int e, int num)
133:	    {
134:		
135:		int l=0, m=0, r, c;
136:		
137:		
138:		l=d/2;
139:		r = l*2;
140:		
141:		m = e/3;
142:		c = m*3;
143:		
144:		for(int a=0; a<2; a++)
145:		    {
146:			for(int b=0; b<3; b++)
147:			    {
148:				if(puzzle[a+r][b+c]==num)
149:				    {
150:					return false;
151:				    }
152:			    }
153:		    }	
154:		return true;	     
155:	    }

Compilation Successful.

--- End sudoku.java ---


