--- Begin Converter.java ---
1:	/* Intfix to Postfix Converter */
2:	
3:	import java.util.*;
4:	
5:	public class Converter
6:	{
7:	    public static Queue <Character> expression = new LinkedList <Character>();
8:	    public static Queue <Character> converted = new LinkedList <Character>();
9:	    public static final char PLUS = '+', MINUS = '-', MULT = '*', DIV = '/';
10:	    //public static 
11:	    //public enum Operator {PLUS, MINUS, MULT, DIV};
12:	    //public static Operator operator;
13:	
14:	    public static void main (String [] args) throws Exception
15:	    {
16:		Scanner sc = new Scanner(System.in);	
17:		String equationS;
18:		char last=' ', secondLast=' ';
19:		int pCount=0;
20:		Stack <Character> aStack = new Stack<Character>();
21:	
22:		System.out.println("This program converts an equation from infix to postfix");
23:		
24:		try
25:		    {
26:			do
27:			    {
28:				System.out.println("Enter an equation to convert or CTRL+D to end");
29:				equationS = sc.next();
30:				
31:				for(int i = 0; i < equationS.length(); i++)
32:				    {
33:					expression.add(equationS.charAt(i));
34:				    }
35:				
36:				for(int j = 0; j < expression.size(); j++)
37:				    {
38:					switch(expression.element())
39:					    {
40:						
41:					    case PLUS:
42:					    case MINUS:
43:					    case MULT:
44:					    case DIV:
45:						if(last == ' ')
46:						    {
47:							throw new MissingOpperandException();
48:						    }
49:						else
50:						    {
51:							while(!aStack.isEmpty() && aStack.peek() != '(' && findPres(expression.element()) <= findPres(aStack.peek()))
52:							    { 
53:								converted.add(aStack.pop());
54:							    }
55:							last = expression.remove();
56:							aStack.push(last);
57:						    }
58:						break;
59:						
60:					    case '(':
61:						
62:						pCount++;
63:						aStack.push(expression.remove());
64:						break;
65:						
66:					    case ')':
67:						
68:						pCount--;
69:						if(pCount < 0) // checks to see if there are not enough open parentheses
70:						    {
71:							throw new MismatchedParenthesesException();
72:						    }
73:						while(aStack.peek() != '(')
74:						    {
75:							converted.add(aStack.pop());
76:						    }
77:						aStack.pop();
78:						expression.remove();
79:						last = ' ';
80:						break;
81:						
82:					    default:
83:						if(expression.element()==' ')
84:						    {
85:							expression.remove();
86:						    }
87:						else if(last == PLUS || last == MINUS || last == MULT || last ==DIV || last == ' ')
88:						    {
89:							secondLast = last;
90:							last = expression.remove();
91:							converted.add(last);				
92:						    }
93:						else
94:						    {
95:							throw new MissingOpperatorException();
96:						    }
97:						break;
98:					    }
99:				    }
100:				print();
101:			    }while(sc.hasNext());
102:		    }
103:		
104:		catch(MissingOpperandException moperand)
105:		    {
106:			System.out.println("You are missing an operand");
107:		    }
108:		catch(MissingOpperatorException moperator)
109:		    {
110:			System.out.println("You are missing an operator");
111:		    }
112:		catch(MismatchedParenthesesException mp)
113:		    {
114:			System.out.println("Your parentheses are mismatched");
115:		    }
116:	    }
117:	
118:	    public static int findPres(char op)
119:	    {
120:		switch(op)
121:		    {
122:		    case '+':
123:			return 1;
124:		    case '-':
125:			return 1;
126:		    case '*':
127:			return 2;
128:		    case '/':
129:			return 2;
130:		    }
131:		return 0;
132:	    }
133:	
134:	    public static void print()
135:	    {
136:		for(int z = 0; z < converted.size(); z++)
137:		    {
138:			System.out.print(converted.remove());
139:		    }
140:		System.out.println();
141:	    }

Compilation Successful.

--- End Converter.java ---


